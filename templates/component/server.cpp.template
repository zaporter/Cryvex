{% set snake_name = component.name | lower -%}
{% set camel_name = component.name | camel -%}
#include <viam/sdk/components/{{ snake_name }}/server.hpp>

#include <viam/sdk/common/utils.hpp>
#include <viam/sdk/components/{{ snake_name }}/{{ snake_name }}.hpp>
#include <viam/sdk/config/resource.hpp>
#include <viam/sdk/rpc/server.hpp>

namespace viam {
namespace sdk {

{% for rpc in component.rpcs %}
::grpc::Status {{ camel_name }}Server::{{ rpc.rpc_name }}(::grpc::ServerContext* context,
                        const ::viam::component::{{ snake_name }}::v1::{{ rpc.req_t }}* request,
                        ::viam::component::{{ snake_name }}::v1::{{ rpc.resp_t }}* response) {
    
    if (!request) {
        return ::grpc::Status(::grpc::StatusCode::INVALID_ARGUMENT,
                              "Called [{{ camel_name }}::{{ rpc.rpc_name }}] without a request");
    };

    std::shared_ptr<ResourceBase> rb = resource_manager()->resource(request->name());
    if (!rb) {
        return grpc::Status(grpc::UNKNOWN, "resource not found: " + request->name());
    }
    {% set comp_inst = snake_name %}
    std::shared_ptr<{{ camel_name }}> {{ comp_inst }} = std::dynamic_pointer_cast<{{ camel_name }}>(rb);
    {% set fn = component.member_fns | filter(attribute="name", value=rpc.func_name) | nth(n=0) %}
    {# we want to have Component::type if it isn't a base type. Otherwise just the type #}
    {%- set custom_return_type = component.structs | filter(attribute="name", value=fn.return_t) | nth(n=0) -%}
    {%- if custom_return_type is object -%}
        {%- set qualified_return_type = camel_name ~ "::" ~ fn.return_t -%}
    {% else %}
        {%- set qualified_return_type = fn.return_t -%}
    {%- endif -%}
    {%- if not qualified_return_type == "void" %}{{ qualified_return_type }} result = {% endif -%}{{ comp_inst }}->{{ fn.name }}({% for arg in fn.args -%} 
        request->{{ arg.name }}(){% if not loop.last %}, {% endif %}
    {%- endfor -%});

    {%- for member in custom_return_type.members | default(value=[]) %}
    response->set_{{ member.name }}(result.{{ member.name }});
    {%- endfor %}

    return ::grpc::Status();
}
{% endfor %}

void {{ camel_name }}Server::register_server(std::shared_ptr<Server> server) {
    server->register_service({{ snake_name }});
}

}  // namespace sdk
}  // namespace viam
