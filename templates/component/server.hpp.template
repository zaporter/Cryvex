{% set snake_name = component.name | lower -%}
{% set camel_name = component.name | camel -%}
/// @file components/{{ snake_name }}/server.hpp
///
/// @brief Implements a gRPC server for the `{{ camel_name }}` component.
#pragma once

#include <viam/api/common/v1/common.pb.h>
#include <viam/api/component/{{ snake_name }}/v1/{{ snake_name }}.grpc.pb.h>

#include <viam/sdk/resource/resource_manager.hpp>
#include <viam/sdk/resource/resource_server_base.hpp>

namespace viam {
namespace sdk {

/// @class {{ camel_name }}Server
/// @brief gRPC server implementation of a `{{ camel_name }}` component.
/// @ingroup {{ camel_name }}
class {{camel_name}}Server : public ResourceServer,
                     public viam::component::{{ snake_name }}::v1::{{ camel_name }}Service::Service {
   public:
   {{ camel_name }}Server();
   explicit {{ camel_name }}Server(std::shared_ptr<ResourceManager> manager);
   {% for rpc in component.rpcs %}
    ::grpc::Status {{ rpc.rpc_name }}(::grpc::ServerContext* context,
                            const ::viam::component::{{ snake_name }}::v1::{{ rpc.req_t }}* request,
                            ::viam::component::{{ snake_name }}::v1::{{ rpc.resp_t }}* response) override;
   {% endfor %}

    void register_server(std::shared_ptr<Server> server) override;

    std::shared_ptr<SubtypeService> get_sub_svc();
};

}  // namespace sdk
}  // namespace viam
