{% set snake_name = component.name | lower -%}
{% set camel_name = component.name | camel -%}
/// @file components/{{ snake_name }}/{{ snake_name }}.hpp
///
/// @brief Defines a `{{ camel_name }}` component.
#pragma once

#include <string>

#include <component/{{ snake_name }}/v1/{{ snake_name }}.pb.h>

#include <common/proto_type.hpp>
#include <common/utils.hpp>
#include <config/resource.hpp>
#include <registry/registry.hpp>
#include <subtype/subtype.hpp>

namespace viam {
namespace cppsdk {

/// @defgroup {{ camel_name }} Classes related to the `{{ camel_name }}` component.

/// @class {{ camel_name }}Subtype
/// @brief Defines a `ResourceSubtype` for the `{{ camel_name }}` component.
/// @ingroup {{ camel_name }}
class {{ camel_name }}Subtype : public ResourceSubtype {
public:
  std::shared_ptr<ResourceServerBase> create_resource_server(
      std::shared_ptr<SubtypeService> svc) override;
  std::shared_ptr<ResourceBase> create_rpc_client(
      std::string name, std::shared_ptr<grpc::Channel> chan) override;
  {{ camel_name }}Subtype(const google::protobuf::ServiceDescriptor *service_descriptor)
      : ResourceSubtype(service_descriptor){};
};

/// @class {{ camel_name }} {{ snake_name }}.hpp "components/{{ snake_name }}/{{ snake_name }}.hpp"
/// @brief TODO
/// @ingroup {{ camel_name }}
///
/// This acts as an abstract base class to be inherited from by any drivers representing
/// specific {{ snake_name }} implementations. This class cannot be used on its own.
class {{ camel_name }} : public ComponentBase {
public:
  {% for type in component.structs %}
  /// @struct {{ type.name }}
  /// @brief TODO.
  struct {{ type.name }} {
    {%- for member in type.members %}
        /// {{ member.comment | default(value="TODO") | trim }}
        {{ member.type_t }} {{ member.name }};
    {%- endfor %}
  };
  {% endfor %}
  {% for enum in component.enums %}
  /// @enum {{ enum.name }}
  /// @brief TODO.
  enum {{ enum.name }} {
    {%- for member in enum.members %}
        {{ member.name }}{% if not loop.last %}, {% endif %}

    {%- endfor %}
  };
  {% endfor %}

  // functions shared across all components
  static std::shared_ptr<ResourceSubtype> resource_subtype();
  static Subtype subtype();

  {% for fn in component.from_proto_fns %}
  /// @brief Creates a `{{ fn.return_t }}` struct from its proto representation.
  static {{ fn.return_t }} {{ fn.name }}({% for arg in fn.args -%} 
        viam::component::{{ snake_name }}::v1::{{ arg.type_t }} {{ arg.name }}{% if not loop.last %}, {% endif %}
    {%- endfor %});
    {% endfor %}

  {% for fn in component.to_proto_fns %}
  /// @brief Converts a `{{ fn.args | nth(n=0) | get(key="type_t") }}` struct to its proto representation.
  static viam::component::{{ snake_name }}::v1::{{ fn.return_t }} {{ fn.name }}({% for arg in fn.args -%} 
        {{ arg.type_t }} {{ arg.name }}{% if not loop.last %}, {% endif %}
    {%- endfor %});
  {% endfor %}

  {% for fn in component.member_fns %}
  /// @brief {{ fn.comment | default(value="TODO") | trim }}
  {%- for arg in fn.args %}
  /// @param {{ arg.name }} {{ arg.comment | default(value="TODO") | trim }}
  {%- endfor %}
  virtual {{ fn.return_t }} {{ fn.name }}({% for arg in fn.args -%} 
        {{ arg.type_t }} {{ arg.name }}{% if not loop.last %}, {% endif %}
    {%- endfor %}) = 0;
  {% endfor %}

protected:
  explicit {{ camel_name }}(std::string name) : ComponentBase(std::move(name)){};
};

{% for struct_type in component.structs %}
bool operator==(const {{ camel_name }}::{{struct_type.name}}& lhs, const {{ camel_name }}::{{ struct_type.name }}& rhs);
{%- endfor %}

}  // namespace cppsdk
}  // namespace viam
