{% set snake_name = component.name | lower -%}
{% set camel_name = component.name | camel -%}
#pragma once

#include <viam/api/common/v1/common.pb.h>
#include <viam/api/component/{{ snake_name }}/v1/{{ snake_name }}.grpc.pb.h>
#include <viam/api/component/{{ snake_name }}/v1/{{ snake_name }}.pb.h>

#include <viam/sdk/components/{{ snake_name }}/{{ snake_name }}.hpp>
#include <viam/sdk/components/{{ snake_name }}/client.hpp>
#include <viam/sdk/components/{{ snake_name }}/server.hpp>

namespace viam {
namespace sdktests {
namespace {{ snake_name }} {

class Mock{{ camel_name }} : public viam::sdk::{{ camel_name }} {
    public:

    {%- for fn in component.member_fns %}
    {% set is_custom_return_type = component.structs | filter(attribute="name", value=fn.return_t) | nth(n=0) -%}
    {%- if is_custom_return_type is object -%}
        {%- set qualified_return_type = "viam::sdk::" ~ camel_name ~ "::" ~ fn.return_t -%}
    {% else %}
        {%- set qualified_return_type = fn.return_t -%}
    {%- endif -%}
    {{ qualified_return_type }} {{ fn.name }}({% for arg in fn.args -%} 
        {{ arg.type_t }} {{ arg.name }}{% if not loop.last %}, {% endif %}
    {%- endfor %}) override;
    {%- endfor %}
    static std::shared_ptr<Mock{{ camel_name }}> get_mock_{{ snake_name }}();

    Mock{{ camel_name }}(std::string name) : {{ camel_name }}(std::move(name)){};

   private:
    // TODO add private members for mock
    // auto-generated suggestions:
    {%- for struct in component.structs %}
    viam::sdk::{{ camel_name }}::{{ struct.name }} {{ struct.name }}_;
    {%- endfor %}
    std::shared_ptr<std::unordered_map<std::string, std::shared_ptr<ProtoType>>> map;
};

// TODO create fake_xxx functions
// auto-generated suggestions:
{%- for struct in component.structs %}
viam::sdk::{{ camel_name }}::{{ struct.name }} fake_{{ struct.name }}();
{%- endfor %}

}  // namespace {{ snake_name }}
}  // namespace sdktests
}  // namespace viam
