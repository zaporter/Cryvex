{% set snake_name = component.name | lower -%}
{% set camel_name = component.name | camel -%}
#include <tests/mocks/mock_{{snake_name}}.hpp>

#include <common/v1/common.pb.h>
#include <component/{{ snake_name }}/v1/{{ snake_name }}.grpc.pb.h>
#include <component/{{ snake_name }}/v1/{{ snake_name }}.pb.h>

#include <components/{{ snake_name }}/{{ snake_name }}.hpp>
#include <components/{{ snake_name }}/server.hpp>
#include <tests/test_utils.hpp>

namespace viam {
namespace sdktests {
namespace {{ snake_name }} {

using namespace viam::sdk;
{% for fn in component.member_fns %}
{%- set is_custom_return_type = component.structs | filter(attribute="name", value=fn.return_t) | nth(n=0) -%}
{%- if is_custom_return_type is object -%}
    {%- set qualified_return_type = camel_name ~ "::" ~ fn.return_t -%}
{% else %}
    {%- set qualified_return_type = fn.return_t -%}
{%- endif %}
{{ qualified_return_type }} Mock{{ camel_name }}::{{ fn.name }}({% for arg in fn.args -%} 
    {{ arg.type_t }} {{ arg.name }}{% if not loop.last %}, {% endif %}
{%- endfor %}) {
    // TODO impl
    return; 
};
{%- endfor %}

std::shared_ptr<Mock{{ camel_name }}> Mock{{ camel_name }}::get_mock_{{ snake_name }}() {
    auto {{ snake_name }} = std::make_shared<Mock{{ camel_name }}>("mock_{{ snake_name }}");
    // TODO {{ snake_name }}->attr = fake_attr();
    // auto-generated suggestions:
    {%- for struct in component.structs %}
    {{ snake_name }}->{{ struct.name }} = fake_{{ struct.name }}();
    {%- endfor %}

    return {{ snake_name }};
}

// TODO auto-generated suggestions:
{%- for struct in component.structs %}
{{ camel_name }}::{{ struct.name }} fake_{{ struct.name }}() {
    {{ camel_name }}::{{ struct.name }} {{ struct.name }};
    {%- for member in struct.members %}
    {{ struct.name }}.{{member.name}} = TODO;
    {%- endfor %}
    return {{ struct.name }};
}
{% endfor %}

}  // namespace {{ snake_name }}
}  // namespace sdktests
}  // namespace viam
